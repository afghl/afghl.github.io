---
layout: post
title:  "写可维护的项目（代码）"
date:   2017-11-26 16:18:00 +0800
---

最近有机会一个人负责、主导一个项目。其中一项工作，就是需要从零开始写代码做一个code project。在整个过程中，我一直在学习和思考怎么写可维护的代码，写一个可以 **一直维护，一直迭代，却把复杂度控制在一定的范围之内** 的项目。

为什么我对这事感兴趣？因为看过太多悲剧的产生：在我参与的所有代码项目里（我参与工作以来一直写的是业务系统），几乎全部都会陷入这样的境地：对复杂度完全没有把控，对新增的需求，新增的领域知识，只能通过新增模型，新增接口，新增面条式的代码完成。直到复杂度增加到后人无法理解的地步 -- 重写项目。

我们是可以做的更好的。下面说说我的想法和经验。

### 起码，分个层（建立多层次的抽象）

在计算机领域中，任何设计都可见到分层的思想。一个典型的运用就是TCP / IP七层协议：每一层专注在解决自己的问题，完成对上一层的保证。下层对上层封装复杂度，提供抽象。

现在的项目一般会使用第三方框架，业务开发人员的代码相当于在一个框架里填入自己的业务逻辑。也就是说，这种项目天然的有来自框架的抽象，天然的有分层。

但是除此之外，业务开发人员的代码基本上是“事务脚本”，也就是将这件接口要做什么，从头到脚写出来，通常是这样：在数据库里拉出什么对象，改里面的某些值，然后在调用持久层的方法放回去。这样的问题是什么？是 **缺乏抽象层次的代码不能表现领域逻辑**。这样的代码如果人员调动频繁，而且缺乏文档和注释，这些代码的意图就会难以理解。

更麻烦的情况是，将技术细节（比如访问mq中间件，redis的访问细节）耦合在这种事务脚本里，导致代码更难维护。

正确的代码分层和好的OO设计可以很大程度的解决这个问题。它的思想也和其他领域的分层类似：每一层完成自己的任务，下层对上层提供抽象。

很多ddd的书里喜欢把代码分层这样设计：

![Alt](/images/maintainable-code-0.gif)

在学了一些DDD的方法和理念之后，在我最近的这个项目中，项目采用这样的架构：

![Alt](/images/maintainable-code-1.png)

- 外部依赖层：封装对外部领域的依赖。包括：接口，外部DTO，transformer。（为什么要封装？该怎样封装？可以看 #怎样访问外部 一节）
- 提供给外部的接口层：提供给外部调用的层次。这层的角色像是项目里的协调者，一般会做这些事：
   - 向下调用领域层的服务，完成对领域对象的操作。
   - 调用redis，Mq组件的方法，完成除了业务逻辑之外支路逻辑。
   - 发布领域事件
- 领域层：封装重要的领域逻辑。在理想的情况下，这一层可以完全用model来表示，但在实现上，除了model之外，还有很多的service对象。具体代码下详。
- 基础设施层：封装项目对其他基础设施的依赖，如：redis，mq，dao。另外一些util的类也会在这一层。

### 用模型模型表现领域逻辑

先来说说领域层。

#### 起码，让模型有表达的能力

#### 领域模型能完成动作吗？

### 使用ddd构建聚合的概念

聚合的概念，无论是在建模上，还是在代码上，都是一个对控制复杂度，提高代码表达能力的非常有效的抽象。

#### 用代码表现聚合

#### 校验整个聚合

#### 保存聚合

#### 使用版本号 保证聚合的一致性

### 用facade模式控制外部访问
### 怎样访问外部
### 考虑拓展性（问问：如果xx怎么办？）
### 不再写面条式的代码

### 使用领域事件分离支路逻辑

一般来说，支路逻辑是可以




### 参考

- 《企业应用架构模式》
- 《领域驱动设计》
