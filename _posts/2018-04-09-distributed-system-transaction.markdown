---
title:  "分布式系统 - 单机transactions"
date:   2018-02-28 23:07:00 +0800
tags: [distribute-system transaction]
---

单机事务（本文会简称为事务），区分于分布式事务，可以大致这样定义：单机事务的场景里，客户端可以有多个，但提供写入操作的节点只有一个，单机就是提供写入的服务器的单机。事务是数据库提供的最强大的保证：单机事务中，最复杂的是并发问题，随时有可能出现多个client同时修改同一个记录的情况，而正是利用不同的事务的隔离级别的保证，使业务开发人员可以规避掉一部分的并发问题，大大简化application层的编程模型。

单机事务中能出现什么并发问题？为什么要有不同的隔离级别？每个隔离级别解决什么问题，又是怎么实现的呢？接下来是在《Designing Data-Intensive Applications》一书中关于这些问题的一点笔记。

### 理清ACID

ACID是数据库事务的四个保证： Atomicity（原子性）, Consistency（一致性）, Isolation（隔离性）, Durability（持久性）。但这四点到底说了什么？我们可以从中知道，哪些我们希望不要发生的情况绝不会发生？其实什么都看不出来。这几个名字像所有口号一样被过分滥用而失去原意了。

我们可以重新看看这四点，理清事务的特点（或者说起码的保证）到底是什么。

#### Atomicity（原子性）

原子意为不能拆分的最小单位。事务有原子性，也就是事务的所有操作要么一起成功，要么一起失败。如果事务中有一步失败，整个事务会回滚到事务开始之前，就像整个事务没有执行过一样。

#### Consistency（一致性）

ACID里的C是一个含糊不清的词，要知道在单机事务中，数据只有一个copy，那么到底是什么和什么一致？

ACID里的一致性和分布式系统里的一致性是两个概念，它说的是：只要你正确使用事务，那么无论在任何时候查看数据，总是 **满足不变的一致性条件**。比如信用卡里的可用余额和已用金额之和总是一个固定值。

显然，数据库本身不能定义什么数据是满足所谓的一致性的，这应该是application层的责任。而且一致性也不是数据库提供的根本的保证，它是application层在利用数据库的Atomicity，Isolation，Durability能获得的一个保证。

#### Isolation（隔离性）



#### Durability（持久性）

### 事务与隔离级别

### 参考

- 《Designing Data-Intensive Applications》
